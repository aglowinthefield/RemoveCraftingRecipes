using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins.Order;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;

namespace RemoveCraftingRecipes
{
    public class Program
    {
        
        static Lazy<RemoveCraftingRecipesSettings> _settings = null!;
        public static RemoveCraftingRecipesSettings Settings => _settings.Value;
        
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "RemoveCraftingRecipes.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            // Unsure if we want to throw exceptions if the user forgets to actually add mods.
            if (Settings.ModsToTrim.Count < 1)
            {
                Console.WriteLine("No mods to trim. Aborting! (Check settings to update the list of mods)");
                throw new Exception("No mods to trim");
            }

            foreach (var modKey in Settings.ModsToTrim)
            {
                ISkyrimModGetter? trimmingMod = state.LoadOrder[modKey].Mod;
                if (trimmingMod is null)
                {
                    // Unclear how this could happen, but let's go.
                    throw new Exception(modKey + " is specified in settings but is not found!");
                }
                RemoveRecipesFromMod(trimmingMod, Settings.RemoveTempering, state);
            }
        }

        private static void RemoveRecipesFromMod(
            ISkyrimModGetter mod,
            bool removeTemper,
            IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (IConstructibleObjectGetter constructibleObjectGetter in mod.ConstructibleObjects.Records)
            {
                var isTempering = constructibleObjectGetter.WorkbenchKeyword.FormKey.Equals(Skyrim.Keyword.CraftingSmithingArmorTable.FormKey);
                if (!removeTemper && isTempering)
                {
                    continue;
                }
                var patchRecipe = state.PatchMod.ConstructibleObjects.GetOrAddAsOverride(constructibleObjectGetter);
                patchRecipe.Clear();
            }
            Console.WriteLine("Removed crafting recipes for " + mod.ModKey);
        }
    }
}
